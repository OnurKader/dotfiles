#include <Vector/Vector.cpp>
#include <cmath>
#include <vector>

class ParticleSystem
{
private:
	struct Particle
	{
		VectorF vel, pos;
		float lifetime;
		float brightness;
	};
	VectorF emitter;

public:
	std::vector<Particle> particles;
	float lifetime;

	ParticleSystem() : particles(2048), lifetime(28.0f) {}

	void setEmitter(VectorF pos)
	{
		emitter = pos;
	}

	void update(float elapsedTime)
	{
		for (std::size_t i = 0; i < particles.size(); i++)
		{
			Particle &p = particles[i];
			p.lifetime -= elapsedTime * 32.f;
			if (p.lifetime < 0.0f)
				resetParticle(i);
			p.pos = *(p.pos + *(p.vel * (2.6f * elapsedTime)));
			float ratio = p.lifetime / lifetime;
			p.brightness = ratio * 255;
		}
	}

	void resetParticle(std::size_t index)
	{
		float angle = (std::rand() % 360) * 3.14152f / 180.f;
		float speed = (std::rand() % 60) + 35.f;
		particles[index].vel.set(std::cos(angle) * speed, std::sin(angle) * speed);
		particles[index].lifetime = (std::rand() % 28) + 1.8f;
		particles[index].pos = emitter;
	}
};
