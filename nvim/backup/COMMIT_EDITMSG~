
# Please enter the commit message for your changes. Lines starting
# with '#' will be ignored, and an empty message aborts the commit.
#
# On branch master
# Changes to be committed:
#	modified:   build/Main
#	new file:   src/Entity/Entity.cpp
#	new file:   src/Entity/Entity.h
#	modified:   src/Game.cpp
#	modified:   src/Game.h
#	deleted:    src/Player.cpp
#	modified:   src/States/GameState.cpp
#	modified:   src/States/GameState.h
#	modified:   src/States/State.cpp
#	modified:   src/States/State.h
#	deleted:    src/Tile.cpp
#
# ------------------------ >8 ------------------------
# Do not modify or remove the line above.
# Everything below it will be ignored.
diff --git a/build/Main b/build/Main
index 0472f6a..6528c12 100755
Binary files a/build/Main and b/build/Main differ
diff --git a/src/Entity/Entity.cpp b/src/Entity/Entity.cpp
new file mode 100644
index 0000000..42d003e
--- /dev/null
+++ b/src/Entity/Entity.cpp
@@ -0,0 +1,28 @@
+#include "Entity.h"
+
+Entity::Entity()
+{
+	rect.setSize(sf::Vector2f(58.f, 69.f));
+	rect.setPosition({250.f, 240.f});
+	rect.setFillColor(sf::Color::Yellow);
+	movement_speed = 123.456f;
+}
+
+Entity::~Entity()
+{
+}
+
+void Entity::move(const float x, const float y, const float &dt)
+{
+	rect.move({x * dt * movement_speed, y * dt * movement_speed});
+}
+
+// TEMP TODO REMOVE
+void Entity::update(const float &dt)
+{
+}
+
+void Entity::render(sf::RenderTarget *target = nullptr)
+{
+	target->draw(rect);
+}
diff --git a/src/Entity/Entity.h b/src/Entity/Entity.h
new file mode 100644
index 0000000..ab04afc
--- /dev/null
+++ b/src/Entity/Entity.h
@@ -0,0 +1,37 @@
+#ifndef ENTITY_H
+#define ENTITY_H
+
+#include <iostream>
+#include <cmath>
+#include <string>
+#include <vector>
+#include <fstream>
+#include <sstream>
+#include <stack>
+#include <map>
+#include <SFML/Graphics.hpp>
+#include <SFML/System.hpp>
+#include <SFML/Audio.hpp>
+#include <SFML/Window.hpp>
+
+class Entity
+{
+protected:
+	sf::Vector2f pos, vel, acc;
+	sf::RectangleShape rect;
+	float movement_speed;
+
+public:
+	// Construct
+	Entity();
+	virtual ~Entity();
+
+	// Functions
+	// virtual void update(const float &) = 0;
+	// virtual void render(sf::RenderTarget *) = 0;
+	virtual void update(const float &);
+	virtual void render(sf::RenderTarget *);
+	virtual void move(const float, const float, const float &);
+};
+
+#endif
diff --git a/src/Game.cpp b/src/Game.cpp
index 0bd20e6..b5cc9f1 100644
--- a/src/Game.cpp
+++ b/src/Game.cpp
@@ -32,7 +32,16 @@ void Game::openWindow()
 
 void Game::initStates()
 {
-	states.push(new GameState(window));
+	states.push(new GameState(window, &supp_keys));
+}
+
+void Game::initKeys()
+{
+	supp_keys.emplace("Escape", sf::Keyboard::Key::Escape);
+	supp_keys.emplace("A", sf::Keyboard::Key::A);
+	supp_keys.emplace("D", sf::Keyboard::Key::D);
+	supp_keys.emplace("W", sf::Keyboard::Key::W);
+	supp_keys.emplace("S", sf::Keyboard::Key::S);
 }
 
 void Game::loadAssets()
@@ -47,6 +56,7 @@ Game::Game() : dt(0.f)
 {
 	openWindow();
 	loadAssets();
+	initKeys();
 	initStates();
 }
 
diff --git a/src/Game.h b/src/Game.h
index 8fd129c..3fc5d70 100644
--- a/src/Game.h
+++ b/src/Game.h
@@ -13,11 +13,13 @@ private:
 	sf::Font roboto;
 	float dt;
 	std::stack<State *> states;
+	std::map<std::string, int> supp_keys;
 
 	// Initialize
 	void openWindow();
 	void initStates();
 	void loadAssets();
+	void initKeys();
 
 public:
 	// Constructor - Destructor Stuff
diff --git a/src/Player.cpp b/src/Player.cpp
deleted file mode 100644
index e69de29..0000000
diff --git a/src/States/GameState.cpp b/src/States/GameState.cpp
index 6f25667..4732890 100644
--- a/src/States/GameState.cpp
+++ b/src/States/GameState.cpp
@@ -1,7 +1,8 @@
 #include "GameState.h"
 
-GameState::GameState(sf::RenderTarget *window) : State(window)
+GameState::GameState(sf::RenderTarget *window, std::map<std::string, int> *supp_keys) : State(window, supp_keys)
 {
+	initKeys();
 }
 
 GameState::~GameState()
@@ -11,20 +12,38 @@ GameState::~GameState()
 void GameState::update(const float &dt)
 {
 	updateKeys(dt);
+	player.update(dt);
+}
+
+void GameState::initKeys()
+{
+	keybinds["MOVE_LEFT"] = supp_keys->at("A");
+	keybinds["MOVE_RIGHT"] = supp_keys->at("D");
+	keybinds["MOVE_UP"] = supp_keys->at("W");
+	keybinds["MOVE_DOWN"] = supp_keys->at("S");
 }
 
 void GameState::render(sf::RenderTarget *target = nullptr)
 {
+	if (!target)
+		target = window;
+	player.render(target);
 }
 
 void GameState::remove()
 {
-	printf("Game State Over!\n");
 }
 
 void GameState::updateKeys(const float &dt)
 {
-	if (sf::Keyboard::isKeyPressed(sf::Keyboard::Space))
-		printf("Hello, Spaceman!\n");
+	if (sf::Keyboard::isKeyPressed(sf::Keyboard::Key(keybinds.at("MOVE_LEFT"))))
+		player.move(-1.f, 0.f, dt);
+	if (sf::Keyboard::isKeyPressed(sf::Keyboard::Key(keybinds.at("MOVE_RIGHT"))))
+		player.move(1.01f, 0.f, dt);
+	if (sf::Keyboard::isKeyPressed(sf::Keyboard::Key(keybinds.at("MOVE_UP"))))
+		player.move(0.f, -1.f, dt);
+	if (sf::Keyboard::isKeyPressed(sf::Keyboard::Key(keybinds.at("MOVE_DOWN"))))
+		player.move(0.f, 1.01f, dt);
+
 	checkDeath();
 }
diff --git a/src/States/GameState.h b/src/States/GameState.h
index 2d82d01..ffa2aed 100644
--- a/src/States/GameState.h
+++ b/src/States/GameState.h
@@ -6,8 +6,12 @@
 class GameState : public State
 {
 private:
+	Entity player;
+
+	void initKeys();
+
 public:
-	explicit GameState(sf::RenderTarget *);
+	explicit GameState(sf::RenderTarget *, std::map<std::string, int> *);
 	virtual ~GameState();
 
 	void update(const float &);
diff --git a/src/States/State.cpp b/src/States/State.cpp
index 4de090b..7590035 100644
--- a/src/States/State.cpp
+++ b/src/States/State.cpp
@@ -1,7 +1,7 @@
 #include "State.h"
 
-State::State(sf::RenderTarget *window)
-	: window(window), dead(false)
+State::State(sf::RenderTarget *window, std::map<std::string, int> *supp_keys)
+	: window(window), dead(false), supp_keys(supp_keys)
 {
 }
 
diff --git a/src/States/State.h b/src/States/State.h
index 4577c20..89fd96e 100644
--- a/src/States/State.h
+++ b/src/States/State.h
@@ -1,28 +1,20 @@
 #ifndef STATE_H
 #define STATE_H
 
-#include <iostream>
-#include <cmath>
-#include <string>
-#include <vector>
-#include <fstream>
-#include <sstream>
-#include <stack>
-#include <map>
-#include <SFML/Graphics.hpp>
-#include <SFML/System.hpp>
-#include <SFML/Audio.hpp>
-#include <SFML/Window.hpp>
+#include "../Entity/Entity.h"
 
 class State
 {
-private:
+protected:
 	std::vector<sf::Texture> textures;
+	std::map<std::string, int> *supp_keys, keybinds;
 	sf::RenderTarget *window;
 	bool dead;
 
+	virtual void initKeys() = 0;
+
 public:
-	explicit State(sf::RenderTarget *);
+	explicit State(sf::RenderTarget *, std::map<std::string, int> *);
 	virtual ~State();
 	virtual void update(const float &) = 0;
 	virtual void render(sf::RenderTarget *) = 0;
diff --git a/src/Tile.cpp b/src/Tile.cpp
deleted file mode 100644
index e69de29..0000000
