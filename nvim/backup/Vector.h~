/* g++ -c main.cpp */
/* g++ main.o -o SFML_RUN -lsfml-graphics -lsfml-window -lsfml-system */
/* ./SFML_RUN */

#ifndef VECTOR_H
#define VECTOR_H

template <typename T>
class Vector
{
private:
	double p_angle, c_angle;

public:
	T x, y;

	// Constructors
	Vector();
	Vector(T, T);
	Vector(const Vector<T> &);

	// Arithmetics
	Vector<T> *add(Vector<T> &);
	Vector<T> *add(T);
	static Vector<T> *add(Vector<T> &, Vector<T> &);
	Vector<T> *sub(Vector<T> &);
	Vector<T> *sub(T);
	static Vector<T> *sub(Vector<T> &, Vector<T> &);
	Vector<T> *mult(Vector<T> &);
	Vector<T> *mult(T);
	Vector<T> *div(Vector<T>&);
	Vector<T> *div(T);

	// Utilities
	void set(T, T);
	void set(Vector<T> &);
	void print();
	Vector<T> *copy();

	// Rotation
	Vector<T> *rotate(double);

	// Random
	static double Random();
	static Vector<T> *random();
	static Vector<T> *random(T);
	static Vector<T> *random(T, T);

	// Vector Math
	double heading();
	T mag();
	T magSq();
	Vector<T> *normalize();
	Vector<T> *normalise();
	static double angleBetween(Vector<T> &, Vector<T> &);
	Vector<T> *setMag(T);
	Vector<T> *limit(T);
	double dist(Vector<T> &);
	static double dist(Vector<T> &, Vector<T> &);
	static Vector<T> *fromAngle(double);

	// Operator Overloading
	Vector<T>* operator+(Vector<T>&);
	Vector<T>* operator-(Vector<T>&);
	Vector<T>* operator*(Vector<T>&);
	Vector<T>* operator*(double);
	Vector<T>* operator/(double);
	Vector<T>* operator=(Vector<T>&);

};

#endif
