#include <iostream>
#include <string>
#include <SFML/Graphics.hpp>
#include "Particle.cpp"
#include <vector>

inline float getFPS(const sf::Time &time) { return 1000000.0f / time.asMicroseconds(); }

int main()
{
	sf::ContextSettings settings;
	settings.antialiasingLevel = 4;
	sf::RenderWindow window(sf::VideoMode(900, 884), "I'm Faded", sf::Style::Close | sf::Style::Titlebar, settings);
	window.setVerticalSyncEnabled(true);
	window.setPosition({960 - 462, 540 - 466});

	// Variables
	sf::Texture t_particle;
	sf::Sprite s_particle;
	sf::Font roboto;
	sf::Text FPS;
	std::vector<Particle> particles;
	particles.reserve(512);

	if (!t_particle.loadFromFile("./Particle.png"))
		std::cout << "Error while loading Particle.png from disk" << std::endl;
	if (!roboto.loadFromFile("./RobotoCondensed-Regular.ttf"))
		std::cout << "Error while loading Roboto Font from disk" << std::endl;

	FPS.setFont(roboto);
	FPS.setCharacterSize(14);
	FPS.setFillColor(sf::Color::Cyan);
	t_particle.setSmooth(true);
	s_particle.setTexture(t_particle);
	s_particle.setColor(sf::Color(189, 190, 63));

	for (unsigned i = 0; i < 512; i++)
	{
		Particle temp(&s_particle);
		temp.setScale({0.3f, 0.3f});
		temp.vel.x = ((std::rand() / 429496729.f) - 2.5f) * 16.f;
		temp.vel.y = ((std::rand() / 429496729.f) - 2.5f) * 16.f;
		temp.sprite->setColor(sf::Color(74, 120, 200, 55 + std::rand() % 200));
		particles.push_back(temp);
	}

	sf::Clock fps_clock;

	while (window.isOpen())
	{
		window.clear();
		sf::Event event;
		while (window.pollEvent(event))
		{
			if (event.type == sf::Event::Closed || (event.type == sf::Event::KeyPressed && event.key.code == sf::Keyboard::Escape))
				window.close();
		}

		// Game Logic
		for (unsigned i = 0; i < particles.size(); i++)
		{
			particles[i].update();
			particles[i].follow(static_cast<sf::Vector2f>(sf::Mouse::getPosition(window)));
			particles[i].vel.x += (std::rand() / 429496729.f - 2.5f) * 0.135f;
			particles[i].vel.y += (std::rand() / 429496729.f - 2.5f) * 0.135f;
			window.draw(particles[i]);
		}

		int fps = static_cast<int>(getFPS(fps_clock.restart()) + 0.45f);
		FPS.setString("FPS : " + std::to_string(fps));

		window.draw(FPS);
		window.display();
	}

	return 0;
}
